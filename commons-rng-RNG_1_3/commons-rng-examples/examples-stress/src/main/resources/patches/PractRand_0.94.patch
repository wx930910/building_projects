--- src/test_batteries.cpp.orig	2019-10-23 16:21:03.850440174 +0100
+++ src/test_batteries.cpp	2019-10-23 16:21:12.538517226 +0100
@@ -25,8 +25,8 @@
 #include "PractRand/Tests/CoupGap.h"
 #include "PractRand/Tests/BRank.h"
 #include "PractRand/Tests/mod3.h"
-#include "PractRand/Tests/NearSeq.h"
-#include "PractRand/Tests/Coup16.h"
+#include "PractRand/Tests/nearseq.h"
+#include "PractRand/Tests/coup16.h"
 #include "PractRand/Tests/DistFreq4.h"
 #include "PractRand/Tests/transforms.h"
 
--- tools/RNG_test.cpp.orig	2019-10-23 16:24:21.040189344 +0100
+++ tools/RNG_test.cpp	2019-10-23 16:24:50.280448774 +0100
@@ -453,10 +453,10 @@
 	return true;
 }
 
-#include "PractRand/tests/Birthday.h"
-#include "PractRand/tests/FPMulti.h"
-#include "PractRand/tests/DistFreq4.h"
-#include "PractRand/tests/Gap16.h"
+#include "PractRand/Tests/birthday.h"
+#include "PractRand/Tests/FPMulti.h"
+#include "PractRand/Tests/DistFreq4.h"
+#include "PractRand/Tests/Gap16.h"
 PractRand::Tests::ListOfTests testset_BirthdaySystematic() {
 	//return PractRand::Tests::ListOfTests(new PractRand::Tests::FPMulti(3,0));
 	//return PractRand::Tests::ListOfTests(new PractRand::Tests::BirthdayAlt(10), new PractRand::Tests::Birthday32());
--- tools/RNG_from_name.h.orig	2019-10-23 17:42:13.570076059 +0100
+++ tools/RNG_from_name.h	2019-10-23 17:42:33.774253293 +0100
@@ -8,7 +8,7 @@
 			std::fprintf(stderr, "error reading standard input\n");
 			std::exit(0);
 		}
-		enum { BUFF_SIZE = 4096 / sizeof(Word) };
+		enum { BUFF_SIZE = 8096 / sizeof(Word) };
 		Word *pos, *end;
 		bool ended;
 		Word buffer[BUFF_SIZE];
@@ -20,7 +20,10 @@
 			end = &buffer[n];
 		}
 	public:
-		_stdin_reader() : ended(false) { refill(); }
+		_stdin_reader() : ended(false) {
+		    setvbuf(stdin, 0, _IOFBF, 8192);
+		    refill();
+		}
 		Word read() { if (pos == end) refill(); return *(pos++); }
 	};
 	class RNG_stdin : public PractRand::RNGs::vRNG8 {
